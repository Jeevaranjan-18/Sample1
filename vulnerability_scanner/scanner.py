
import configparser
import requests
from mailer import send_alert
from bs4 import BeautifulSoup
from urllib.parse import urljoin

def get_forms(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.content, "html.parser")
        return soup.find_all("form")
    except Exception as e:
        print(f"Could not get forms from {url}: {e}")
        return []

def form_details(form):
    details = {}
    action = form.attrs.get("action", "").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def scan_xss(url):
    forms = get_forms(url)
    xss_payload = "<script>alert('xss')</script>"
    is_vulnerable = False

    for form in forms:
        details = form_details(form)
        target_url = urljoin(url, details["action"])
        inputs = details["inputs"]
        data = {}
        for input in inputs:
            if input["type"] == "text" or input["type"] == "search":
                data[input["name"]] = xss_payload

        if details["method"] == "post":
            response = requests.post(target_url, data=data)
        else:
            response = requests.get(target_url, params=data)

        if xss_payload in response.text:
            is_vulnerable = True

    return is_vulnerable

def scan_sqli(url):
    sqli_payload = "' OR 1=1 --"
    is_vulnerable = False
    try:
        response = requests.get(url + sqli_payload)
        if "error" in response.text.lower() or "syntax" in response.text.lower():
            is_vulnerable = True
    except Exception as e:
        print(f"Error testing for SQLi at {url}: {e}")

    return is_vulnerable

def scan_website(target_url, config):
    xss_vulnerable = scan_xss(target_url)
    sqli_vulnerable = scan_sqli(target_url)

    if xss_vulnerable or sqli_vulnerable:
        subject = "Vulnerability Found!"
        body = f"A potential vulnerability was found at {target_url}.\n\n"
        if xss_vulnerable:
            body += "XSS vulnerability detected.\n"
        if sqli_vulnerable:
            body += "SQLi vulnerability detected.\n"

        send_alert(subject, body, config)

    return {
        "xss_vulnerable": xss_vulnerable,
        "sqli_vulnerable": sqli_vulnerable
    }
